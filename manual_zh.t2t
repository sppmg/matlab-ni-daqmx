Daqmx 物件使用手冊
sppmg , http://github.com/sppmg
%%date
%!encoding: UTF-8 %!target: html

% .t2t 文件使用txt2tags格式，請google txt2tags
% 編譯指令 $ txt2tags -t html --toc <file>
%%toc
+ 簡介 +
++ 功能 ++
利用Matlab直接呼叫NI 提供之DLL程式庫來操作Daq裝置。
此daqmx物件使用matlab物件型態，將呼叫NI程式庫所須之資料、函式及處理步驟封裝於單一物件之中(註1)，以簡化主程式寫作。

- 註1：物件仍須另外的matlab程式轉換matlab變數至DLL函式庫可接受格式。
- 註2：你不須要matlab的daq toolbox.


++ 有多簡單？ ++
下面展示兩個讀取訊號的例子。可見得使用本物件操作NI DAQ是如何的輕鬆愜意。相較之下Matlab daq toolbox還稍嫌麻煩。 :D

+ 讀目前電壓
```
daq = daqmx_Task('dev1/ai0');	% 建立控制物件。
daq.read
```

+ 繪出當前訊號
```
daq = daqmx_Task('chan','dev1/ai0','rate',1000);	% 建立控制物件。並設定取樣率、處理週期。
plot(daq.DataTime , daq.data);	% 畫出位於物件內的數據紀錄。利用迴圈或是Callback functin可以取得訊號的連續變化。（若是有即時顯示須求，這裡推薦我為此而寫的monitor.m 物件。同樣讓你事半功倍。）
```
+ 與Matlab daq toolbox 比較
```
s = daq.createSession('ni') ;
s.DurationInSeconds = 10.0 ;
addAnalogInputChannel(s,'Dev2','ai0','Voltage') ;
s.Rate=4000 ;
% data = startForeground(s); <-- Block mode
lh = addlistener(s,'DataAvailable', @proc) ;  % <-- Background mode
s.startBackground
% Below write in "proc" function
plot(event.TimeStamps, event.Data,'+:')
```


+ 安裝 +

+ 安裝 matlab
+ 安裝 NI 驅動
+ 安裝 matlab 相容編譯器（loadlibrary函數要用到），見 http://www.mathworks.com/support/compilers/R2015b/index.html 。 matlab 2015b有支援gcc(MinGW 4.9.2 (Distributor: TDM-GCC)) ，舊版的請裝 Microsoft Windows SDK 7.1 。注意！此SDK有BUG，若安裝過程出錯，請移除 Visual C++ 2010 Redistributable 再裝一遍。 http://stackoverflow.com/questions/1901279/windows-7-sdk-installation-failure
+ 在 matlab 中使用 mbuild -setup 設定使用哪個編譯器。
+ 上 sppmg 的github https://github.com/sppmg/matlab 。選擇分支(Branch)，master是穩定版，develop是開發中版本，較新但可能有點bug。頁面中有"Download ZIP"可以下載整個matlab專案，解壓後將daq目錄複製到你的搜尋路徑中。這樣你應該就能使用所有daq相關功能了。



+ 快速上手 +
這裡展示如何使用daqmx_Task，讓你可以複製、貼上你的程式。( single mode only for 100+ ms interval )
注意！輸出輸入單點電壓僅適用100ms以上讀取週期。若須更快，請使用RealTime模式。

++ 讀當前(一個)電壓 ( Single mode ) ++

```
daq = daqmx_Task('Dev1/ai0');
data = daq.read;
fprintf('data = %g \n',data);
daq.delete;
clear daq;
```

++ 輸出一個電壓值 ( Single mode ) ++

注意！電壓會保持在你所輸出的值，不會自動回到0V。
```
daq = daqmx_Task('Dev1/ao1');
daq.write(n*0.1);
daq.delete;
clear daq;
```

++ 迴圈快速讀電壓( RealTime mode ) ++

```
dataLen=1e3 ; data(dataLen)=0 ;
daq = daqmx_Task('chan','dev1/ai0', 'mode','r') ;
daq.start;
for n = 1:dataLen
	data(n) = daq.read;
end
daq.stop
daq.delete;
clear daq;
```

++ 迴圈快速輸出電壓( RealTime mode ) ++

```
dataLen=1e3 ;
daq = daqmx_Task('chan','dev1/ao0', 'mode','r') ;
daq.start;
for n = 1:dataLen
	daq.write(1) ;
end
daq.stop
daq.delete;
clear daq;
```

++ 讀 "一段" 電壓 ( Finite mode ) ++

這裡示範以 1KHz 讀1秒鐘，讀完後plot出來
```
daq = daqmx_Task('chan','Dev1/ai0' ,'rate',1000, 'SampleNum', 1000);
daq.start;
figure ; plot(daq.data);
daq.delete;
clear daq;
```

++ 輸出 "一段" 電壓 ( Finite mode ) ++

這裡示範以 1KHz 輸出1秒鐘長的特定訊號。訊號以sin,cos混成。
宣告daqmx_Task 物件有下面兩種方式，第一行（註解處）用於已知訊號長度。
第二行用於未知訊號長度。兩者差異僅在省去指定模式以及首次輸出延遲而已，應該也只有不到1ms差別。
```
data =0.1*(sin(7*linspace(0,2*pi,1000))+cos(3*linspace(0,2*pi,1000)));
data2 =0.1*(sin(7*linspace(0,2*pi,100))+cos(3*linspace(0,2*pi,100)));

% daq = daqmx_Task('chan','Dev1/ao1' ,'rate',1000, 'SampleNum', 1000);
daq = daqmx_Task('chan','Dev1/ao1' ,'rate',1000, 'Mode', 'f');

daq.write(data);
% Write same data again.
	pause(5);
daq.write;

% change data set ( different length )
	pause(5);
daq.write(data2);

```
可以看到即使輸出長度改變也沒問題。要重複輸出相同訊號只要不加參數即可。

++ 連續性讀入電壓 ( Continuous mode ) ++

下面示範使用Callback方式畫出訊號並以0.5秒週期更新。

```
daq = daqmx_Task('chan','Dev1/ai0','rate',1000,'callbackfunc','proc','ProcPeriod',0.5);
daq.start;

function proc(daq)
	plot(daq.DataTime , daq.data);
end
```
若不須即時操作，可以不用Callback，直接使用plot(daq.DataTime , daq.data);

++ 連續性輸出電壓 ( Continuous mode ) ++
程式寫了還沒測，徵求勇者中......



+ daqmx_Task 物件介紹 +
注意!! NI DAQ有許多系列（包含我用的M系列）不允許在同類通道使用不同取樣率，如ai0 使用1KHz ，ai1使用2KHz。
另一方面，若要使用本物件讀寫多通道請小心，程式有寫，一樣沒測。
不支援多裝置！

++ 讀寫模式 ++
此daqmx物件支援電壓（輸出、輸入）、電流（輸入）操作。並且支援NI提供的三種操作模式。"single", "finite", "continuous".。若沒特別指定，程式會依照參數自行選擇最有可能之模式。

|| 模式名稱  | 允許縮寫 | 說明 | 自動選擇範例 |
| Single     | s       | 讀寫一筆數據。 | daq = daqmx_Task('dev1/ai1') |
| Finite     | f       | 讀寫指定長度的數據。須指定取樣率及數據量。 | daq = daqmx_Task('chan','dev1/ai1','rate',1000,'SampleNum',100) |
| Continuous | c       | 連續讀寫數據。須指定取樣率。 | daq = daqmx_Task('chan','dev1/ai1','rate',100) |
| RealTime   | r       | 屬於特殊模式，專用於迴圈(eg. for loop)高速讀寫單點。因此為了效能起見有部份限制，詳見下方 | 須手動選擇模式( 'Mode','r' ) |

除 RealTime mode 外，進行讀取操作後，資料會存在object,DataStorage中。建議透過data,read方法讀取資料。
寫入操作須要透過write寫入輸出緩衝區。


Finite, Continuous, RealTime 均須在開始讀寫前先以 .start 開始背景程式，並於結束全部操作後以 .stop停止背景程式。

Finite 以.start 開始可以進行背景操作，亦即你可以繼續執行其他指令而不被阻斷(non-block)，直到你使用 .wait 或是直接使用 .read 才會等待到擷取完成才能進行下面的指令。直接使用 .read 可以達到阻斷式讀取訊號。

Continuous ProcPeriod設定如下。當設定成 0 時，不會產生 timer 進行自動讀寫。你須要用迴圈手動執行。和 RealTime mode 的差別在於你取得的值將會是固定週期而非基於迴圈週期。若資料進出緩衝區速度和DAQ裝置速度不匹配的話，CircBuf屬性將左右程式結果（見屬性說明）。ProcPeriod設定非0時，會自動產生一個timer定時執行。注意！timer非多執行緒，當matlab忙碌時將無法執行。

ProcPeriod設定表
|| 設定值(s)  | 結果   |
|  none       | 0.1    |
| >  0.001s   | 設定值 |
| 1e-5 ~ 1e-3 | 1e-3   |
| < 1e-5      | 0      |

RealTime 為高效能的 Single mode，須搭配 .start / .stop 。物件內也使用糟糕寫法，因此具有以下限制：
+ 須手動選擇模式( 'Mode','r' )
+ 僅支援 .read/.write ，不支援 .data 亦不保存資料，因此不支援無參數.write()
+ 限定單一通道 (channel)
+ 幾乎不做參數檢查


++ 物件方法（物件內函數，一律小寫開頭） ++

所有的方法名稱均以小寫開頭。

資料操作使用.read / .write / .data

須要操作計時工作就用.start / .stop （不取數據時請.stop）

建議在daq程式開始前使用 .resetDev

+++ 公開函數 +++ 
|| 方法名稱   | 說明 |
| resetDev   | 重設 daq 裝置 |
| start      | 開始執行預設工作 |
| stop       | 停止執行預設工作 |
| delete     | 釋放此物件相關之佔用資源 |
| data       | 取得一定時間內的所有資料（長度定義在 DataStorageLen） |
| read       | 取得最新一段資料。 |
| write      | 將數據寫出（mode f,c為寫入NI緩衝區） |
| wait       | 等待背景工作完成（用於mode f）       |
| changeMode | 於建立物件後改變模式設定。 （未完成） |
| changeRate | 於建立物件後改變取樣率設定。（未完成） |


對於 .read / .write / .data 在各讀寫模式下的作用如下表
||           | read | write | data |
| Single     | 
| Finite     | 
| Continuous | 
| RealTime   | 



+++ 私有函數（僅供物件自身使用） +++
|| 方法名稱   | 說明 |
| aibg | 背景執行類比訊號輸入 (background analogy input) |
| aobg | 背景執行類比訊號輸出 (background analogy ouput)  |
| setTiming |  |
| selectChan |  |


++ 物件屬性（存於物件內的變數，一律大寫開頭） ++
+++ 公開屬性 +++
|| 名稱 = 預設值 | 說明 |
| ChanAlias | 多通道時可以設定/使用別名操作指定通道（未測試功能） |
| Max = 10 | daq讀值範圍，影響到精度 |
| Min = -10 | daq讀值範圍，影響到精度 |
| DataLayout = 1 | 多通道讀寫時，資料的排列方式 DAQmx_Val_GroupByScanNumber = 1 |
| SampleNum = 1 | 設定讀寫資料長度，會影響到NI api設定緩衝區大小。但目前本程式已可自動修正以避免緩衝區問題|
| Timeout = 5 | 逾時（會自動修正） |
| ProcPeriod | 多久（秒）與NI緩衝區交換一次資料，同時也是使用者設定函數的呼叫週期。 |
| DataStorageLen | daqmx_Task中資料區的長度（資料點數） |
| CallbackFunc | Callback 函數名稱 |
| CircBuf = 1 | 循環使用緩衝。讀取時，若讀取速度慢於DAQ取值速度會覆寫舊有資料。寫入時則是重複輸出舊有緩衝資料。 0 則會導致程式出錯退出 |
| BufHead = 1 | Head pointer for write buffer, next write data. （將停用）|
| UserData | 供使用者自由使用的空間 |

+++ 唯讀屬性 +++
下表是僅供讀取的屬性。如要修改必須透過物件方法來改。

|| 名稱 = 預設值 | 說明 |
| PhyChan | eg : 'Dev1/ai0' |
| NITaskHandle | 操作 NI Task 的鑰匙 |
| TimerHandle | 操作 matlab timer 的鑰匙 |
| DevName |  % eg : Dev1 |
| ChanType | % eg : ai / ao / di / do / etc .... |
| ChanMeas = 'Voltage' | % Measure eg. V,I |
| ChanNum | 使用通道數 |
| ChanOccupancy | |
| Mode | 讀寫模式，限定: 'Single' , 'Finite' , 'Continuous' |
| Rate | 取樣率 |
| DataTime | % storage time of each data |
| DataLastTime = 0 |  |
| DataLastPartNum = 0 |  |
| DataTotalNumPerChan = 0 | % per channel |
| DataStorage | % storage input data. |
| LibHeader = 'NIDAQmx-lite.h' | Header 檔位置，置於搜尋路徑中。 |
| LibDll = 'C:\WINDOWS\system32\nicaiu.dll' | dll檔位置 |
| LibAlias = 'nidaqmx' | 程式庫別名 |
| LastVal_SampleNum = 1 | LastVal_ 開頭的屬性用來比較屬性是否改變 |
| IsSingleChan = 0 | single mode 中會採用較快的函數 |
| LibPtr_null | LibPtr_ 開頭的屬性用來儲存指標型態變數，直接使用calllib指令時會用到。 |






+ 選項及參數 +
至少須指定使用的channel


+ 進一步認識 NI-DAQmx 及daqmx_Task 物件 +
++ 讀寫模式 ++
NI daqmx 本身讀寫模式有三種，Single mode 配合start task 成為本物件的第四種模式： RealTime mode
+ Single

讀取一點訊號，訊號不經緩衝區直接進到你的程式中。

+ Finite

讀一段訊號，因此需要設定取樣率、資料長度。訊號會先進緩衝區（位於電腦記憶體中），待讀取完畢後才傳入你的程式。非阻塞式讀取，亦即你的程式會繼續執行。如要停在讀取處直到訊號讀寫完須執行DAQmxWaitUntilTaskDone函式。

+ Continuous

連續讀寫訊號。與Finite差別在是使用有限的緩衝。一樣要設定取樣率、資料長度。但資料長度指的是每次讀取時，由緩衝區讀入的長度。初始設定值會影響到NI api設定緩衝區大小。

+ RealTime

對於即時處理的操作可以在 Single 操作前後使用 start/stop task 增加效能。
本物件另外新增 RealTime mode 做特別處理。因此在本物件的 RealTime mode 相較於 Single mode 會有些限制。



++ 緩衝區 ++

[Continuous Acquisition and Generation with Finite Buffer Size  http://zone.ni.com/reference/en-XX/help/370466V-01/mxcncpts/contcacqgen/ ]
圖
[http://zone.ni.com/images/reference/en-XX/help/370466V-01/loc_eps_howacircularbufferworks.gif ]


++ 計時模式 ++
詳細的計時模式可以參考NI網頁:
[Sample Timing Type http://zone.ni.com/reference/en-XX/help/370471W-01/mxcprop/attr1347/ ]
這裡只介紹兩個我所用到的計時模式

|| 名稱(程式內代號) | 說明 |
| OnDemand(10390) | software-timed ，亦即以軟體觸發。當你使用讀寫指令時才進行讀寫。Single RealTime 都是 OnDemand |
| SampClk(10388) | Sample Clock ，需要硬體時鐘。會有背景程式在幕後以時鐘的頻率取值。時鐘可以是外部訊號或是使用 DAQ 內置的時鐘(OnboardClock)，細節見[Terminal Names http://zone.ni.com/reference/en-XX/help/370466V-01/mxcncpts/termnames ] 。本物件中，凡是須要設定Rate者如 Finite,Continuous 均為 SampClk |






+ 預定放入內容 +

NIDAQmx-lite.h 是由 NIDAQmx.h 複製出所須部份的檔案。另建新檔是因為 NIDAQmx.h 內函數過多，載入時間太長（eeebox甚至要2min）。

+ 附錄 +

++ 存取速度 ++
+++ 測試a +++
測試環境為matlab 2011b (虛擬機) + 虛擬DAQ USB-6221(BNC)
測試項目為：
mode=
+ realtime (single with On-demand timing (a type of software timing. ) )
+ Continuous

讀取方法為：
+ midlib (藉由中間程式庫做轉換)
+ calllib array (直接使用calllib指令，但使用 DAQmxReadAnalogF64 函數)
+ calllib single (直接使用calllib指令，但使用 DAQmxWriteAnalogScalarF64 函數)

為了測試realtime (On demand)和single mode 的差別，下面有start的表示使用 DAQmxStartTask 

```
_ real time ( sim dev) _
no start
midlib
>> test_DAQmxMidLib
0.570 s 	 1000 loop 	 0.570 ms/loop
0.626 s 	 1000 loop 	 0.626 ms/loop
0.612 s 	 1000 loop 	 0.612 ms/loop
calllib array
>> test_DAQmxMidLib
0.325 s 	 1000 loop 	 0.325 ms/loop
0.314 s 	 1000 loop 	 0.314 ms/loop
0.320 s 	 1000 loop 	 0.320 ms/loop
calllib single
>> test_DAQmxMidLib
0.273 s 	 1000 loop 	 0.273 ms/loop
0.292 s 	 1000 loop 	 0.292 ms/loop
0.263 s 	 1000 loop 	 0.263 ms/loop

start
>> test_DAQmxMidLib
0.348 s 	 1000 loop 	 0.348 ms/loop
0.397 s 	 1000 loop 	 0.397 ms/loop
0.382 s 	 1000 loop 	 0.382 ms/loop
>> test_DAQmxMidLib
0.136 s 	 1000 loop 	 0.136 ms/loop
0.183 s 	 1000 loop 	 0.183 ms/loop
0.175 s 	 1000 loop 	 0.175 ms/loop
>> test_DAQmxMidLib
0.095 s 	 1000 loop 	 0.095 ms/loop
0.111 s 	 1000 loop 	 0.111 ms/loop
0.118 s 	 1000 loop 	 0.118 ms/loop
```

結論：
DAQmxStartTask calllib + DAQmxWriteAnalogScalarF64 (single point) 最快
(關於 Continuous 與 RealTime 的速度比較有點異常，不過看起來 Continuous 沒有比較快)
(很奇怪的是無論是否start task，都是使用On demand。寫在流程圖的tip中...隱含了autostart task)


+++ 測試b 關於本物件速度 +++
測試環境為matlab 2011b (虛擬機) + 虛擬DAQ USB-6221(BNC)
讀測試(obj.read)
將 RealTime 判斷置於常規位置 (和其他模式的 switch 放一起)
```
0.209 s 	 1000 loop 	 0.209 ms/loop
0.269 s 	 1000 loop 	 0.269 ms/loop
0.233 s 	 1000 loop 	 0.233 ms/loop
```
將 RealTime 判斷移至最開始，高於一切參數檢查
```
0.132 s 	 1000 loop 	 0.132 ms/loop
0.121 s 	 1000 loop 	 0.121 ms/loop
0.156 s 	 1000 loop 	 0.156 ms/loop
```
因此為了效能，防止輸入錯誤參數是後端程式開發者的責任 :D

與直接calllib比較的話
read:
|| 迴圈時間(ms , 1e4 loop,10 times)  | 說明 |
| mean = 0.069 SD = 0.002 | calllib 最佳值。 一般會是0.1ms，似乎看jvm處理，同一個程式的迴圈時間幾乎一樣，但有時mean會飄走。 |
| mean = 0.136 SD = 0.005 | obj 通常值，偶爾變成0.2。 |

write:
obj
mean = 0.116 SD = 0.002
+++ 測試程式 +++
```
clear classes ;
readLen = 1e4 ; % length for each loop
trial = 10 ;
data(readLen)=0;
time(trial) = 0;

daq = daqmx_Task('chan','dev1/ai0', 'mode','r') ;
%daq = daqmx_Task('chan','dev1/ao0', 'mode','r') ;
daq.resetDev;
daq.start;
for m = 1:trial
	t0=tic;
	for n=1:readLen
		%NewData = DAQmxReadAnalogF64(LibAlias ,NITaskHandle, -1 , Timeout, DataLayout, ChanNum, SampleNum) ; % -1 == DAQmx_Val_Auto
		%calllib(LibAlias,'DAQmxReadAnalogF64',NITaskHandle,-1, 10, 1,readarray_ptr,1,sampread_ptr,empty_ptr);

		%calllib(LibAlias,'DAQmxReadAnalogScalarF64',NITaskHandle,Timeout,value_ptr,empty_ptr);
		%data(n)=value_ptr.Value;

		data(n)=daq.read;
		% daq.write(1);
	end
	t=toc(t0);
	fprintf('%0.3f s \t %d loop \t %0.3f ms/loop \n', t, readLen, t*1e3/readLen);
	time(m)=t*1e3/readLen;
end
daq.stop;
fprintf('time , mean = %0.3f SD = %0.3f \n', mean(time), std(time) );
```